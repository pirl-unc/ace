[
  {
    "objectID": "python_api.html",
    "href": "python_api.html",
    "title": "Python API",
    "section": "",
    "text": "Here is a list of ACE classes and methods:"
  },
  {
    "objectID": "python_api.html#aidplatereader",
    "href": "python_api.html#aidplatereader",
    "title": "Python API",
    "section": "AIDPlateReader",
    "text": "AIDPlateReader\n\nload_readout_file\nLoads an AID plate reader readout file.\n@staticmethod\nload_readout_file(\n    excel_file: str,\n    plate_id: int\n) -> pd.DataFrame\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\nexcel_file\nAID plate reader results Excel file.\n\n\nplate_id\nPlate ID (e.g. 1).\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\ndf_counts\nDataFrame with the following columns: ‘plate_id’, ‘well_id’, ‘spot_count’."
  },
  {
    "objectID": "python_api.html#elispot",
    "href": "python_api.html#elispot",
    "title": "Python API",
    "section": "ELISpot",
    "text": "ELISpot\n\nassign_well_ids\nAssign well IDs to an ELISpot experiment configuration.\n@staticmethod\nassign_well_ids(\n    df_configuration: pd.DataFrame,\n    plate_type: str\n) -> pd.DataFrame\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’.\n\n\nplate_type\nPlate type (allowed values: ‘96-well_plate’).\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’, ‘plate_id’, ‘well_id’.\n\n\n\n\n\ngenerate_configuration\nGenerate an ELISpot experiment configuration.\ngenerate_configuration(\n    self, random_seed: int,\n    disallowed_peptide_pairs: List[Tuple[str,str]] = [],\n    enforced_peptide_pairs: List[Tuple[str,str]] = []\n) -> pd.DataFrame\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\nrandom_seed\nRandom seed.\n\n\ndisallowed_peptide_pairs\nList of tuples (peptide ID, peptide ID).\n\n\nenforced_peptide_pairs\nList of tuples (peptide ID, peptide ID).\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\nstatus\nStatus (cp_model.OPTIMAL, cp_model.FEASIBLE, cp_model.INFEASIBLE, cp_model.MODEL_INVALID or cp_model.UNKNOWN).\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’.\n\n\n\n\n\nidentify_hit_peptides\nIdentify hit peptides.\n@staticmethod\nidentify_hit_peptides(\n    hit_pool_ids: List[str], \n    df_configuration: pd.DataFrame\n) -> pd.DataFrame:\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\nhit_pool_ids\nList of hit pool IDs.\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’.\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\ndf_hits\nDataFrame with the following columns: ‘peptide_id’, ‘pool_ids’, ‘num_coverage’, ‘deconvolution_result’\n\n\n\n\n\nverify_configuration\nVerify an ELIspot configuration.\n@staticmethod\nverify_configuration(\n    df_configuration: pd.DataFrame,\n    num_peptides_per_pool: int,\n    num_coverage: int\n) -> bool:\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’.\n\n\nnum_peptides_per_pool\nNumber of peptides per pool.\n\n\nnum_coverage\nCoverage.\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\nis_optimal\nTrue if the ELIspot configuration meets the following criteria:(1) Each peptide is in ‘num_coverage’ number of different pools.(2) Each peptide is in exactly one unique combination of pool IDs.(3) There is an optimal (minimal) number of pools.False otherwise."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "Source code: link\nLicense: Apache 2.0 License\nLatest Stable Version: 0.1.0.5\nUpdated date: September 11, 2023\nACE is a python library and command-line software for:\n\nGeneration of ELISpot assignments.\nDeconvolution of hit peptides from ELISpot results.\n\n\n\nPlease first download the latest stable release of ACE from here\npip install ace-<version>.tar.gz\n\n\n\n\npandas (>=1.5.2)\nnumpy (>=1.23.1)\ngolfy>=2.5.0\nortools>= 9.3.10497\ntorch\ntransformers (==4.30.2)\nscikit-learn\nopenpyxl\nlevenshtein\n\n\n\n\nusage: ace [-h] [--version] {generate,deconvolve,verify} ...\n\nACE Configurator for ELISpot.\n\npositional arguments:\n  {generate,deconvolve,verify}\n                        ACE sub-commands.\n    generate            Generates an ELISpot experiment configuration.\n    deconvolve          Deconvolve hit peptide IDs given read-outs from an ELISpot experiment.\n    verify              Verifies whether an ELISpot assignment satisfies all ACE constraints.\n\noptions:\n  -h, --help            show this help message and exit\n  --version, -v         show program's version number and exit\nACE includes the following commands:\n\ngenerate (generate an ELISpot configuration)\ndeconvolve (deconvolve hit peptides from ELISpot results)\nverify (verify if an ELISpot configuration is optimal)\n\n\n\n\nIf you use ACE in a publication, please cite our preprint describing ACE."
  },
  {
    "objectID": "generate.html",
    "href": "generate.html",
    "title": "generate",
    "section": "",
    "text": "usage: ace generate [-h]\n    (--num-peptides NUM_PEPTIDES | --peptides-file PEPTIDES_FILE)\n    --num-peptides-per-pool NUM_PEPTIDES_PER_POOL\n    --num-coverage NUM_COVERAGE\n    --output-excel-file OUTPUT_EXCEL_FILE\n    [--plate-size PLATE_SIZE]\n    [--mode {golfy,cpsat_solver}]\n    [--sequence-similarity-threshold SEQUENCE_SIMILARITY_THRESHOLD]\n    [--sequence-similarity-function {cosine,euclidean,levenshtein}]\n    [--cluster-peptides CLUSTER_PEPTIDES]\n    [--golfy-random-seed GOLFY_RANDOM_SEED]\n    [--golfy-max-iters GOLFY_MAX_ITERS]\n    [--golfy-strategy {greedy,random,valid,singleton,repeat}]\n    [--golfy-allow-extra-pools {True,False}]\n    [--cpsat-solver-num-processes CPSAT_SOLVER_NUM_PROCESSES]\n    [--cpsat-solver-shuffle-iters CPSAT_SOLVER_SHUFFLE_ITERS]\n    [--cpsat-solver-max-peptides-per-block CPSAT_SOLVER_MAX_PEPTIDES_PER_BLOCK]\n    [--cpsat-solver-max-peptides-per-pool CPSAT_SOLVER_MAX_PEPTIDES_PER_POOL]\n    [--verbose VERBOSE]\n\n\n\nRequired Parameter\nDescription\n\n\n\n\n--num-peptides\nTotal number of peptides.\n\n\n--peptides-file\nPeptides file (.csv or .xlsx) with the following expected columns: peptide_id, peptide_sequence. Please note that only either this parameter or --num-peptides can be supplied. An example .xlsx file can be found here\n\n\n--num-peptides-per-pool\nNumber of peptides per pool\n\n\n--num-coverage\nCoverage (i.e. number of peptide replicates).\n\n\n--output-excel-file\nOutput Excel (.xlsx) file.\n\n\n\n\n\n\n\n\n\n\nOptional Parameter\nDescription\n\n\n\n\n--plate-size\nNumber of wells on plate. Allowed values: 24, 48, 96, 384 (default: 96).\n\n\n--mode\nConfiguration generation mode. Allowed values: golfy, cpsat_solver (default: golfy).\n\n\n--sequence-similarity-threshold\nSequence similarity threshold (default: 0.7). A higher threshold leads to more stringent peptide pairing.\n\n\n--sequence-similarity-function\nSequence similarity function. Allowed values: cosine, euclidean, levenshtein (default: euclidean).\n\n\n--cluster-peptides\nCluster peptides if set to true (default: true).\n\n\n--verbose\nIf True, prints messages. Otherwise, messages are not printed (default: True).\n\n\n\nThe following optional parameters apply when --mode golfy\n\n\n\n\n\n\n\nOptional Parameter\nDescription\n\n\n\n\n--golfy-random-seed\nRandom seed for golfy (default: 42).\n\n\n--golfy-max-iters\nNumber of maximum iterations for golfy (default: 2000).\n\n\n--golfy-strategy\nStrategy for golfy. Allowed value (default: greedy).\n\n\n--golfy-allow-extra-pools\nAllow extra pools for golfy (default: False).\n\n\n\nThe following optional parameters apply when --mode cpsat_solver\n\n\n\n\n\n\n\nOptional Parameter\nDescription\n\n\n\n\n--cpsat-solver-num-processes\nNumber of processes for CP-SAT solver (default: 2).\n\n\n--cpsat-solver-shuffle-iters\nNumber of iterations to shuffle pool IDs to minimize number of non-unique pool assignment violations for CP-SAT solver (default: 1000).\n\n\n--cpsat-solver-max-peptides-per-block\nMaximum number of peptides per block (default: 100).\nThe CPSAT-solver divides peptides into the specified number of peptides if the total number of peptides is bigger than the specified number\n(e.g. 220 peptides are divided into 2 blocks of 100 peptides and 1 block of 20 peptides if –max-peptides-per-block is 100).\nIncreasing this number from the current default value will likely make the computation intractable so it is recommended that you keep this at 100.\n\n\n--cpsat-solver-max-peptides-per-pool\nMaximum number of peptides per pool (default: 10). Increasing this number from the current default value will likely make the computation intractable so it is recommended that you keep this at 10.\n\n\n\n\nExample\nIn the example below, you want to generate an ELISpot configuration that pools 5 peptides per pool (i.e. well) for a total of 25 unique peptides specified in a file named 25peptide_sequences.xlsx. You also want to repeat each peptide 3 times (i.e. 3x coverage); each peptide will appear in 3 different pools.\nace generate \\\n  --peptides-file 25peptide_sequences.xlsx \\\n  --num-peptides-per-pool 5 \\\n  --num-coverage 3 \\\n  --output-excel-file 25peptides_5perpool_3x_configuration.xlsx\nRunning the above example will result in the following output file: 25peptides_5perpool_3x_configuration.xlsx"
  },
  {
    "objectID": "identify.html",
    "href": "identify.html",
    "title": "identify",
    "section": "",
    "text": "usage: ace identify [-h] \n    --readout-file-type READOUT_FILE_TYPE \n    --readout-files READOUT_FILES \n    --configuration-csv-file CONFIGURATION_CSV_FILE \n    --min-positive-spot-count MIN_POSITIVE_SPOT_COUNT \n    --output-csv-file OUTPUT_CSV_FILE\n\n\n\n\n\n\n\nRequired Parameter\nDescription\n\n\n\n\n--readout-file-type\nELISpot read-out file type (allowed options: pool_id, aid_plate_reader).\n\n\n--readout-files\nELISpot read-out file(s).If the readout-file-type is pool_id, then the expected columns of the CSV file are: pool_id, spot_count.If the readout-file-type is aid_plate_reader, then the readout-files are the Excel files from the AID plate reader machine. If there were pools in 2 or more plates, then supply the files in the following order: plate 1 readout file, plate 2 readout file etc.\n\n\n--configuration-csv-file\nELISpot configuration CSV file. Expected columns: pool_id, peptide_id, plate_id, well_id.\n\n\n--min-positive-spot-count\nNumber of spots for a pool to be considered a positive hit.\n\n\n--output-csv-file\nOutput CSV file.\n\n\n\n\nExample\nLet’s say you used the generate command in ACE to generate an ELISpot configuration for pooling 10 peptides per pool for a total of 100 unique peptides. The configuration also repeated each peptide 3 times (i.e. 3x coverage); you created 100peptides_10perpool_3x.csv. You took this configuration and successfully ran an ELISpot experiment. Now you want to identify (deconvolve) hit peptides. Here we describe how you can achieve this using ACE.\n\nAID Plate Reader\nIf you used a plate reader from AID, we are able to automatically parse the xlsx file from the machine.\nelispot_results.xlsx:\n\nIdentify (deconvolve) hit peptides from your ELISpot experiment:\nace identify \\\n  --readout-file-type aid_plate_reader \\\n  --readout-files /path/elispot_results.xlsx \\\n  --configuration-csv-file /path/100peptides_10perpool_3x.csv \\\n  --min-positive-spot-count 300 \\\n  --output-csv-file ace_deconvolution_results.csv\n\n\nAny Reader\nYou can alternatively supply a generic ELISpot results csv file to ACE:\nelispot_results.csv:\n\n\n\npool_id\nspot_count\n\n\n\n\npool_1\n300\n\n\n…\n…\n\n\npool_30\n0\n\n\n\nIdentify (deconvolve) hit peptides from your ELISpot experiment:\nace identify \\\n  --readout-file-type pool_id \\\n  --readout-files /path/elispot_results.csv \\\n  --configuration-csv-file /path/100peptides_10perpool_3x.csv \\\n  --min-positive-spot-count 300 \\\n  --output-csv-file ace_deconvolution_results.csv\n\n\n\nDeconvolution results\nHere is what ACE deconvolution results look like:\n\n\n\n\n\n\n\n\n\npeptide_id\npool_ids\nnum_coverage\ndeconvolution_result\n\n\n\n\npeptide_7\npool_5;pool_9;pool_13\n3\nhit\n\n\n…\n…\n…\n…\n\n\npeptide_9\npool_1;pool_9;pool_14\n3\ncandidate_hit\n\n\n\nACE deconvolution identifies two classes of peptides: candidate_hit and hit. Peptides that have the label hit are confident hits (assuming no false positives) because they were present in num_coverage (i.e. 3 in the above configuration) number of different pools with at least one unique assignment of hit peptide-pool. On the other hand, peptides that have the label candidate_hit need further validation (i.e. a second round of ELISpot) to determine whether it is indeed a hit peptide."
  },
  {
    "objectID": "verify.html",
    "href": "verify.html",
    "title": "verify",
    "section": "",
    "text": "The configuration has the minimum number of necessary pools: \\[ n_{pools} = \\frac{n_{peptides}}{n_{peptides\\;per\\;pool}} \\cdot n_{coverage} \\]\nEach peptide belongs to a unique combination of pool (well) IDs.\nEach peptide belongs to \\(n_{coverage}\\) different pool (well) IDs.\n\nusage: ace verify [-h] --assignment-excel-file ASSIGNMENT_EXCEL_FILE\n\nrequired arguments:\n  --assignment-excel-file ASSIGNMENT_EXCEL_FILE\n\n\n\n\n\n\n\nRequired Parameter\nDescription\n\n\n\n\n--assignment-excel-file\nELISpot assignment Excel file. The following columns are expected to be present in a sheet named ‘assignment’: ‘plate_id’, ‘well_id’, ‘peptide_id’, ‘peptide_sequence’. The following columns are expected to be present in a sheet named ‘parameters’: ‘num_coverage’, ‘num_peptides_per_pool’.\n\n\n\n\nExample\nace verify --assignment-excel-file 25peptides_5perpool_3x_configuration.xlsx\nAn example configuration file can be found below:\n25peptides_5perpool_3x_configuration.xlsx"
  },
  {
    "objectID": "deconvolve.html",
    "href": "deconvolve.html",
    "title": "deconvolve",
    "section": "",
    "text": "usage: ace deconvolve [-h]\n    --readout-file-type READOUT_FILE_TYPE\n    --readout-files READOUT_FILES\n    --assignment-excel-file ASSIGNMENT_EXCEL_FILE\n    --output-excel-file OUTPUT_EXCEL_FILE\n    [--statistical-deconvolution-method {em,lasso}]\n    [--min-spot-count MIN_SPOT_COUNT]\n    [--min-peptide-activity MIN_PEPTIDE_ACTIVITY]\n    [--verbose VERBOSE]\n\n\n\n\n\n\n\nRequired Parameter\nDescription\n\n\n\n\n--readout-file-type\nELISpot readout file type (allowed options: pool_id, aid_plate_reader).\n\n\n--readout-files\nELISpot readout file(s). The expected columns are ‘plate_id’, ‘well_id’, and ‘spot_count’.\nIf –readout-file-type is ‘aid_plate_reader’, then the readout-files are the Excel files from the AID plate reader machine.\nIf –readout-file type is ‘aid_plate_reader’ and there were pools in 2 or more plates, then supply the files in the following order:\nplate 1 readout file, plate 2 readout file etc.\n\n\n--assignment-excel-file\nELISpot assignment Excel file. Expected columns: ‘peptide_id’, ‘peptide_sequence’, ‘plate_id’, ‘well_id’ in a sheet named ‘assignment’.\n\n\n--output-excel-file\nOutput deconvolution Excel file.\n\n\n--min-positive-pool-spot-count\nMinimum spot count for a pool to be considered a positive pool.\n\n\n\n\n\n\n\n\n\n\nOptional Parameter\nDescription\n\n\n\n\n--statistical-deconvolution-method\nStatistical deconvolution mode (default: em).\n\n\n--min-peptide-activity\nMinimum estimated activity of a peptide to be considered for hit set. This value is used if when ‘–mode em’ or ‘–mode lasso’ (default: 1.0).\n\n\n--verbose\nIf True, prints messages. Otherwise, messages are not printed (default: True).\n\n\n\n\nExample\nLet’s say you used the generate command in ACE to generate an ELISpot configuration for pooling 5 peptides per pool for a total of 25 unique peptides. The configuration also repeated each peptide 3 times (i.e. 3x coverage); you created 25peptides_5perpool_3x_configuration.xlsx. You took this configuration and successfully ran an ELISpot experiment. Now you want to deconvolve hit peptides. Here we describe how you can achieve this using ACE.\n\nAny Reader\nYou can supply a generic ELISpot results .xlsx file to ACE:\n25peptides_5perpool_3x_pool-id_readout.xlsx:\n\n\n\nplate_id\nwell_id\nspot_count\n\n\n\n\n1\nA1\n0\n\n\n1\nA2\n300\n\n\n…\n…\n…\n\n\n1\nB3\n0\n\n\n\nDeconvolve hit peptides from your ELISpot experiment:\nace deconvolve \\\n  --readout-file-type pool_id \\\n  --readout-files ../test/data/25peptides_5perpool_3x_pool-id_readout.xlsx \\\n  --assignment-excel-file ../test/data/25peptides_5perpool_3x_configuration.xlsx \\\n  --min-positive-pool-spot-count 300 \\\n  --output-excel-file outputs/25peptides_5perpool_3x_pool-id_readout_deconvolved.xlsx\nRunning the above command results in the following file:\n25peptides_5perpool_3x_pool-id_readout_deconvolved.xlsx:\n\n\nAID Plate Reader\nIf you used a plate reader from AID, we are able to automatically parse the .xlsx file from the machine.\n25peptides_5perpool_3x_aid-plate-reader_readout.xlsx:\n\nDeconvolve hit peptides from your ELISpot experiment:\nace deconvolve \\\n  --readout-file-type aid_plate_reader \\\n  --readout-files 25peptides_5perpool_3x_aid-plate-reader_readout.xlsx \\\n  --assignment-excel-file ../test/data/25peptides_5perpool_3x_configuration.xlsx \\\n  --min-positive-pool-spot-count 300 \\\n  --output-excel-file 25peptides_5perpool_3x_aid-plate-reader_readout_deconvolved.xlsx\nRunning the above command results in the following file:\n25peptides_5perpool_3x_aid-plate-reader_readout_deconvolved.xlsx:\n\n\n\nDeconvolution results\nACE deconvolution identifies two classes of peptides: confident_hit and candidate_hit. Peptides that have the label confident_hit are confident hits because they were present in num_coverage (i.e. 3 in the above configuration) number of different pools with at least one unique assignment of hit peptide-pool. On the other hand, peptides that have the label candidate_hit need further validation (i.e. a second round of ELISpot) to determine whether it is indeed a hit peptide."
  },
  {
    "objectID": "developer_notes.html",
    "href": "developer_notes.html",
    "title": "Developer Notes",
    "section": "",
    "text": "cd gui/\npython -m eel ace_gui.py views \\\n    --onedir --noconsole --clean \\\n    --icon ace_gui.ico \\\n    --name ACE \\\n    --copy-metadata tqdm \\\n    --copy-metadata regex \\\n    --copy-metadata filelock \\\n    --copy-metadata requests \\\n    --copy-metadata packaging \\\n    --copy-metadata numpy \\\n    --copy-metadata torch \\\n    --add-data \"trained_model_w_data_augmentation_b3000.pt:.\""
  }
]