{"title":"Python API","markdown":{"yaml":{"title":"Python API"},"headingText":"AIDPlateReader","containsRefs":false,"markdown":"\n\nHere is a list of `ACE` classes and methods:\n\n| Class                                   | Description                                                                     |\n| --------------------------------------- | ------------------------------------------------------------------------------- |\n| [AIDPlateReader](#aidplatereader)       | AID plate reader.                                                               |\n| [ELISpot](#elispot)                     | An ELISpot.                                                                     |\n\n<br/>\n\n\n### load_readout_file\n\nLoads an AID plate reader readout file.\n\n```python\n@staticmethod\nload_readout_file(\n    excel_file: str,\n    plate_id: int\n) -> pd.DataFrame\n```\n\n| Input                          | Description                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------- |\n| `excel_file`                   | AID plate reader results Excel file.                                                     |\n| `plate_id`                     | Plate ID (e.g. 1).                                                                       |\n\n| Output                         | Description                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------- |\n| `df_counts`                    | DataFrame with the following columns: 'plate_id', 'well_id', 'spot_count'.               |\n\n<br/>\n\n## ELISpot\n\n### assign_well_ids\n\nAssign well IDs to an ELISpot experiment configuration.\n\n```python\n@staticmethod\nassign_well_ids(\n    df_configuration: pd.DataFrame,\n    plate_type: str\n) -> pd.DataFrame\n```\n\n| Input                          | Description                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------- |\n| `df_configuration`             | DataFrame with the following columns: 'pool_id', 'peptide_id'.                           |\n| `plate_type`                   | Plate type (allowed values: '96-well_plate').                                            |\n\n| Output                         | Description                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------- |\n| `df_configuration`             | DataFrame with the following columns: 'pool_id', 'peptide_id', 'plate_id', 'well_id'.    |\n\n### generate_configuration\n\nGenerate an ELISpot experiment configuration.\n\n```python\ngenerate_configuration(\n    self, random_seed: int,\n    disallowed_peptide_pairs: List[Tuple[str,str]] = [],\n    enforced_peptide_pairs: List[Tuple[str,str]] = []\n) -> pd.DataFrame\n```\n\n| Input                          | Description                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------- |\n| `random_seed`                  | Random seed.                                                                             |\n| `disallowed_peptide_pairs`     | List of tuples (peptide ID, peptide ID).                                                 |\n| `enforced_peptide_pairs`       | List of tuples (peptide ID, peptide ID).                                                 |\n\n| Output                         | Description                                                                                                              |\n| ------------------------------ | ------------------------------------------------------------------------------------------------------------------------ |\n| `status`                       | Status (`cp_model.OPTIMAL`, `cp_model.FEASIBLE`, `cp_model.INFEASIBLE`, `cp_model.MODEL_INVALID` or `cp_model.UNKNOWN`). |\n| `df_configuration`             | DataFrame with the following columns: 'pool_id', 'peptide_id'.                                                           |\n\n### identify_hit_peptides\n\nIdentify hit peptides.\n\n```python\n@staticmethod\nidentify_hit_peptides(\n    hit_pool_ids: List[str], \n    df_configuration: pd.DataFrame\n) -> pd.DataFrame:\n```\n\n| Input                          | Description                                                                                              |\n| ------------------------------ | -------------------------------------------------------------------------------------------------------- |\n| `hit_pool_ids`                 | List of hit pool IDs.                                                                                    |\n| `df_configuration`             | DataFrame with the following columns: 'pool_id', 'peptide_id'.                                           |\n\n| Output                         | Description                                                                                              |\n| ------------------------------ | -------------------------------------------------------------------------------------------------------- |\n| `df_hits`                      | DataFrame with the following columns: 'peptide_id', 'pool_ids', 'num_coverage', 'deconvolution_result'   |\n\n### verify_configuration\n\nVerify an ELIspot configuration.\n\n```python\n@staticmethod\nverify_configuration(\n    df_configuration: pd.DataFrame,\n    num_peptides_per_pool: int,\n    num_coverage: int\n) -> bool:\n```\n\n| Input                          | Description                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------- |\n| `df_configuration`             | DataFrame with the following columns: 'pool_id', 'peptide_id'.                           |\n| `num_peptides_per_pool`        | Number of peptides per pool.                                                             |\n| `num_coverage`                 | Coverage.                                                                                |\n\n| Output                         | Description                                                                              |\n| ------------------------------ | ---------------------------------------------------------------------------------------- |\n| `is_optimal`                   | True if the ELIspot configuration meets the following criteria:<br/>(1) Each peptide is in 'num_coverage' number of different pools.<br/>(2) Each peptide is in exactly one unique combination of pool IDs.<br/>(3) There is an optimal (minimal) number of pools.<br/><br/>False otherwise. |\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["style.css"],"output-file":"python_api.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.132","theme":"materia","title":"Python API"},"extensions":{"book":{"multiFile":true}}}}}