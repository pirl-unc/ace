{"title":"identify","markdown":{"yaml":{"title":"identify"},"headingText":"Example","containsRefs":false,"markdown":"\n\nThis command identifies (deconvolves) hit peptides from ELISpot results.\n\n```bash\nusage: ace identify [-h] \n    --readout-file-type READOUT_FILE_TYPE \n    --readout-files READOUT_FILES \n    --configuration-csv-file CONFIGURATION_CSV_FILE \n    --min-positive-spot-count MIN_POSITIVE_SPOT_COUNT \n    --output-csv-file OUTPUT_CSV_FILE\n```\n\n| Required Parameter          | Description                                                              |\n| --------------------------- | ------------------------------------------------------------------------ |\n| `--readout-file-type`       | ELISpot read-out file type (allowed options: pool_id, aid_plate_reader). |\n| `--readout-files`           | ELISpot read-out file(s).<br/><br/>If the readout-file-type is `pool_id`, then the expected columns of the CSV file are: `pool_id`, `spot_count`.<br/><br/>If the readout-file-type is `aid_plate_reader`, then the readout-files are the Excel files from the AID plate reader machine. If there were pools in 2 or more plates, then supply the files in the following order: plate 1 readout file, plate 2 readout file etc. |\n| `--configuration-csv-file`  | ELISpot configuration CSV file. Expected columns: `pool_id`, `peptide_id`, `plate_id`, `well_id`. |\n| `--min-positive-spot-count` | Number of spots for a pool to be considered a positive hit.              |\n| `--output-csv-file`         | Output CSV file.                                                         |\n\n\nLet's say you used the [generate](generate.qmd) command in `ACE` to generate an ELISpot configuration for pooling 10 \npeptides per pool for a total of 100 unique peptides. The configuration also repeated each peptide 3 times \n(i.e. 3x coverage); you created `100peptides_10perpool_3x.csv`. You took this configuration and \nsuccessfully ran an ELISpot experiment. Now you want to identify (deconvolve) hit peptides. \nHere we describe how you can achieve this using `ACE`.\n\n#### AID Plate Reader\n\nIf you used a plate reader from AID, we are able to automatically parse the `xlsx` file from \nthe machine.\n\n`elispot_results.xlsx`:\n\n![](resources/aid_plate_reader_xlsx_example.png)\n\nIdentify (deconvolve) hit peptides from your ELISpot experiment:\n\n```bash\nace identify \\\n  --readout-file-type aid_plate_reader \\\n  --readout-files /path/elispot_results.xlsx \\\n  --configuration-csv-file /path/100peptides_10perpool_3x.csv \\\n  --min-positive-spot-count 300 \\\n  --output-csv-file ace_deconvolution_results.csv\n```\n\n#### Any Reader\n\nYou can alternatively supply a generic ELISpot results `csv` file to `ACE`:\n\n`elispot_results.csv`:\n\n| pool_id | spot_count |\n| ------- | ---------- |\n| pool_1 | 300 |\n| ... | ... |\n| pool_30 | 0 |\n\nIdentify (deconvolve) hit peptides from your ELISpot experiment:\n\n```bash\nace identify \\\n  --readout-file-type pool_id \\\n  --readout-files /path/elispot_results.csv \\\n  --configuration-csv-file /path/100peptides_10perpool_3x.csv \\\n  --min-positive-spot-count 300 \\\n  --output-csv-file ace_deconvolution_results.csv\n```\n\n### Deconvolution results\n\nHere is what `ACE` deconvolution results look like:\n\n| peptide_id | pool_ids | num_coverage | deconvolution_result |\n|------------| -------- |-------------|----------------------|\n peptide_7  | pool_5;pool_9;pool_13 | 3 | hit                  |\n| ...        | ... | ...         | ...                  |\n| peptide_9  | pool_1;pool_9;pool_14 | 3           | candidate_hit        |\n\n`ACE` deconvolution identifies two classes of peptides: `candidate_hit` and `hit`. \nPeptides that have the label `hit` are confident hits (assuming no false positives) \nbecause they were present in `num_coverage` (i.e. 3 in the above configuration) \nnumber of different pools with at least one unique assignment of hit peptide-pool. \nOn the other hand, peptides that have the label `candidate_hit` need further \nvalidation (i.e. a second round of ELISpot) to determine whether it is indeed a \nhit peptide.\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["style.css"],"output-file":"identify.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.132","theme":"materia","title":"identify"},"extensions":{"book":{"multiFile":true}}}}}