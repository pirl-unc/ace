---
title: "generate"
---

This command generates an ELIspot experiment configuration.

```bash
usage: ace generate [-h] 
    --num-peptides NUM_PEPTIDES 
    --num-peptides-per-pool NUM_PEPTIDES_PER_POOL 
    --num-coverage NUM_COVERAGE 
    --num-processes NUM_PROCESSES
    --output-csv-file OUTPUT_CSV_FILE 
    [--golfy-max-iters GOLFY_MAX_ITERS] 
    [--peptides-csv-file PEPTIDES_CSV_FILE] 
    [--assign-well-ids ASSIGN_WELL_IDS]
    [--plate-type PLATE_TYPE]
    [--random-seed RANDOM_SEED]
```

| Required Parameter         | Description                                                            |
| -------------------------- | ---------------------------------------------------------------------- |
| `--num-peptides`           | Total number of peptides.                                              |
| `--num-peptides-per-pool`  | Number of peptides per pool                                            |
| `--num-coverage`           | Coverage (i.e. number of peptide replicates; recommended: 3).          |
| `--num-processes`          | Number of processes (default: 4)                                       |
| `--output-csv-file`        | Output CSV file.                                                       |

| Optional Parameter         | Description                                                            |
| -------------------------- | ---------------------------------------------------------------------- |
| `--golfy-max-iters`        | Number of maximum iterations for golfy (default: 1000).                |           
| `--peptides-csv-file`      | CSV file with the following columns: 'peptide_id', 'peptide_sequence'. If you specify a file, then the value supplied for `--num-peptides` will be ignored (but must still be supplied). |
| `--assign-well-ids`        | If true, assigns plate and well IDs for each pool ID (default: true).  |
| `--plate-type`             | Plate type. Allowed values: 96-well plate (default: 96-well_plate).    |
| `--random-seed`            | Random seed (default: 1).                                              |


### What is an optimal ELISpot configuration?

An optimal ELISpot configuration is one that satisfies all of the following criteria:

1. The configuration has the minimum number of necessary pools: $$ n_{pools} = \frac{n_{peptides}}{n_{peptides\;per\;pool}} \cdot n_{coverage} $$

2. Each peptide belongs to a unique combination of pool (well) IDs.

3. Each peptide belongs to $n_{coverage}$ different pool (well) IDs.

4. All peptide pairs that are similar (above a certain threshold based on a sequence similarity criterion) are pooled together in exactly one pool.

### How does `ACE` configuration generation work? 
*Notes on configuration generation heuristic*

Owing to the inherent computational complexity of searching for a configuration that assigns a unique combination of pool IDs to each peptide, there is a practical upper limit to systematically exploring the search space. For usability purposes, our method employs a two-tiered approach where we perform a systematic search (`ace` approach; SAT solver) up to certain limits and switch to performing a random search with local optimization (`golfy` approach) beyond these limits. The following figure shows which approach is used depending on the input parameters. Please note that the following table was determined based on internal testing:

![](resources/ace_parameter_heuristic.png)

#### ace

If `--num-peptides-per-pool` is equal to or less than 10 and if `--num-coverage` is equal to or less than 3, we run a SAT solver to systematically search for an optimal configuration (i.e. minimum number of necessary pools). If `--num-peptides` or the number of unique peptides in `--peptides-csv-file` exceeds 100, the `ace` approach divides the peptides list into groups of 100 to linearly scale the computation time of configuration generation to the number of peptides.

#### golfy

If `--num-peptides-per-pool` is greater than 10 or if `--num-coverage` is greater than 3, we perform local optimization on a randomly generated assignment of peptides to pools. If an optimal configuration (i.e. minimum number of necessary pools) cannot be found in this approach, then additional pools are added to the configuration to ensure that each peptide is assigned to a unique combination of pools.