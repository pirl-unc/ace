[
  {
    "objectID": "python_api.html",
    "href": "python_api.html",
    "title": "Python API",
    "section": "",
    "text": "Here is a list of ACE classes and methods:"
  },
  {
    "objectID": "python_api.html#aidplatereader",
    "href": "python_api.html#aidplatereader",
    "title": "Python API",
    "section": "AIDPlateReader",
    "text": "AIDPlateReader\n\nload_readout_file\nLoads an AID plate reader readout file.\n@staticmethod\nload_readout_file(\n    excel_file: str,\n    plate_id: int\n) -> pd.DataFrame\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\nexcel_file\nAID plate reader results Excel file.\n\n\nplate_id\nPlate ID (e.g. 1).\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\ndf_counts\nDataFrame with the following columns: ‘plate_id’, ‘well_id’, ‘spot_count’."
  },
  {
    "objectID": "python_api.html#elispot",
    "href": "python_api.html#elispot",
    "title": "Python API",
    "section": "ELISpot",
    "text": "ELISpot\n\nassign_well_ids\nAssign well IDs to an ELISpot experiment configuration.\n@staticmethod\nassign_well_ids(\n    df_configuration: pd.DataFrame,\n    plate_type: str\n) -> pd.DataFrame\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’.\n\n\nplate_type\nPlate type (allowed values: ‘96-well_plate’).\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’, ‘plate_id’, ‘well_id’.\n\n\n\n\n\ngenerate_configuration\nGenerate an ELISpot experiment configuration.\ngenerate_configuration(\n    self, random_seed: int,\n    disallowed_peptide_pairs: List[Tuple[str,str]] = [],\n    enforced_peptide_pairs: List[Tuple[str,str]] = []\n) -> pd.DataFrame\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\nrandom_seed\nRandom seed.\n\n\ndisallowed_peptide_pairs\nList of tuples (peptide ID, peptide ID).\n\n\nenforced_peptide_pairs\nList of tuples (peptide ID, peptide ID).\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\nstatus\nStatus (cp_model.OPTIMAL, cp_model.FEASIBLE, cp_model.INFEASIBLE, cp_model.MODEL_INVALID or cp_model.UNKNOWN).\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’.\n\n\n\n\n\nidentify_hit_peptides\nIdentify hit peptides.\n@staticmethod\nidentify_hit_peptides(\n    hit_pool_ids: List[str], \n    df_configuration: pd.DataFrame\n) -> pd.DataFrame:\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\nhit_pool_ids\nList of hit pool IDs.\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’.\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\ndf_hits\nDataFrame with the following columns: ‘peptide_id’, ‘pool_ids’, ‘num_coverage’, ‘deconvolution_result’\n\n\n\n\n\nverify_configuration\nVerify an ELIspot configuration.\n@staticmethod\nverify_configuration(\n    df_configuration: pd.DataFrame,\n    num_peptides_per_pool: int,\n    num_coverage: int\n) -> bool:\n\n\n\n\n\n\n\nInput\nDescription\n\n\n\n\ndf_configuration\nDataFrame with the following columns: ‘pool_id’, ‘peptide_id’.\n\n\nnum_peptides_per_pool\nNumber of peptides per pool.\n\n\nnum_coverage\nCoverage.\n\n\n\n\n\n\n\n\n\n\nOutput\nDescription\n\n\n\n\nis_optimal\nTrue if the ELIspot configuration meets the following criteria:(1) Each peptide is in ‘num_coverage’ number of different pools.(2) Each peptide is in exactly one unique combination of pool IDs.(3) There is an optimal (minimal) number of pools.False otherwise."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting Started",
    "section": "",
    "text": "Source code: link\nLicense: Apache 2.0 License\nLatest Stable Version: 0.0.7.0\nUpdated date: July 3, 2023\nACE is a python library and command-line software for:\n\nGeneration of ELISpot configurations.\nIdentification (deconvolution) of hit peptides from ELISpot results.\nVerification of optimality of an ELISpot configuration.\n\n\n\nPlease first download the latest stable release of ACE from here\npip install ace-<version>.tar.gz\n\n\n\n\ngolfy\nortools>= 9.3.10497\ntorch\ntransformers>=4.30.2\npandas\nopenpyxl\n\n\n\n\nusage: ace [-h] [--version] {generate,identify,verify} ...\n\nACE Configurator for ELISpot.\n\npositional arguments:\n  {generate,identify,verify}\n                        ACE sub-commands.\n    generate            Generates an ELISpot experiment configuration.\n    identify            Identify hit peptide IDs given read-outs from an ELISpot experiment.\n    verify              Verifies whether an ELISpot configuration satisfies all ACE constraints.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --version, -v         show program's version number and exit\nACE includes the following commands:\n\ngenerate (generate an ELISpot configuration)\nidentify (identify/deconvolve hit peptides from ELISpot results)\nverify (verify if an ELISpot configuration is optimal)\n\n\n\n\nIf you use ACE in a publication, please cite our paper describing ACE:"
  },
  {
    "objectID": "generate.html",
    "href": "generate.html",
    "title": "generate",
    "section": "",
    "text": "usage: ace generate [-h] \n  (--num-peptides NUM_PEPTIDES | --peptides-csv-file PEPTIDES_CSV_FILE)\n  --num-peptides-per-pool NUM_PEPTIDES_PER_POOL\n  --num-coverage NUM_COVERAGE\n  --output-csv-file OUTPUT_CSV_FILE\n  [--mode {golfy,sat_solver}]\n  [--assign-well-ids ASSIGN_WELL_IDS]\n  [--plate-type PLATE_TYPE]\n  [--random-seed RANDOM_SEED]\n  [--golfy-max-iters GOLFY_MAX_ITERS]\n  [--golfy-init-mode {greedy,random}]\n  [--num-processes NUM_PROCESSES]\n  [--num-peptides-per-batch NUM_PEPTIDES_PER_BATCH]\n\n\n\n\n\n\n\nRequired Parameter\nDescription\n\n\n\n\n--num-peptides\nTotal number of peptides.\n\n\n--peptides-csv-file\nPeptides CSV file with the following expected columns: peptide_id, peptide_sequence. Please note that only either this parameter or --num-peptides can be supplied.\n\n\n--num-peptides-per-pool\nNumber of peptides per pool\n\n\n--num-coverage\nCoverage (i.e. number of peptide replicates; recommended: 3).\n\n\n--output-csv-file\nOutput CSV file.\n\n\n\n\n\n\n\n\n\n\nOptional Parameter\nDescription\n\n\n\n\n--mode\nConfiguration generation mode (default: golfy).\n\n\n--assign-well-ids\nIf true, assigns plate and well IDs for each pool ID (default: true).\n\n\n--plate-type\nPlate type. Allowed values: 96-well_plate (default: 96-well_plate).\n\n\n--random-seed\nRandom seed (default: 1).\n\n\n\nThe following optional parameters apply when --mode golfy\n\n\n\n\n\n\n\nOptional Parameter\nDescription\n\n\n\n\n--golfy-max-iters\nNumber of maximum iterations for golfy (default: 1000).\n\n\n--golfy-init-mode\nInitialization mode for golfy (default: greedy).\n\n\n\nThe following optional parameters apply when --mode sat_solver\n\n\n\n\n\n\n\nOptional Parameter\nDescription\n\n\n\n\n--num-processes\nNumber of processes (default: 4).\n\n\n--num-peptides-per-batch\nNumber of peptides per batch (default: 100). The SAT-solver divides peptides into the specified number of peptides if the total number of peptides is bigger than the specified number (e.g. 220 peptides are divided into 2 batches of 100 peptides and 1 batch of 20 peptides if --num-peptides-per-batch is 100).\n\n\n\n\nQuick example\nIn the example below, you want to generate an ELISpot configuration that pools 10 peptides per pool (i.e. well) for a total of 100 unique peptides. You also want to repeat each peptide 3 times (i.e. 3x coverage); each peptide will appear in 3 different pools.\nace generate \\\n  --num-peptides 100 \\\n  --num-peptides-per-pool 10 \\\n  --num-coverage 3 \\\n  --output-csv-file 100peptides_10perpool_3x.csv\nThe output CSV file 100peptides_10perpool_3x.csv looks like the following:\n\n\n\ncoverage_id\npool_id\npeptide_id\nplate_id\nwell_id\n\n\n\n\ncoverage_1\npool_1\npeptide_1\n1\nA1\n\n\n…\n…\n…\n…\n…\n\n\ncoverage_3\npool_30\npeptide_100\n1\nB12\n\n\n\nPlease note that we have generated several ELISpot configurations that are readily available for download here.\n\n\nPeptides CSV file\nTo account for sequence similarity, please specify --peptides-csv-file. The CSV file should look like the following:\n\n\n\npeptide_id\npeptide_sequence\n\n\n\n\npeptide_1\nSIINFEKL\n\n\n…\n…\n\n\npeptide_100\nSYINFEKL\n\n\n\nPlease note that each peptide_id should be of the following format:\npeptide_<integer>\n\n\nHow does ACE generate an ELISpot configuration?\nOwing to the inherent computational complexity of searching for a configuration that assigns a unique combination of pool IDs to each peptide, there is a practical upper limit to systematically exploring the search space. For usability purposes, our method employs a two-tiered approach where we first perform a random search with local optimization (golfy). If this approach does not lead to an optimal configuration and if the input parameters are within pratical limits (see below), we perform a systematic search (SAT solver). Based on internal testing, the following table shows which approach is used depending on the input parameters:\n\n\ngolfy\nIf --num-peptides-per-pool is greater than 10 or if --num-coverage is greater than 3, we perform local optimization on a randomly generated assignment of peptides to pools. If an optimal configuration (i.e. minimum number of necessary pools) cannot be found in this approach, then additional pools are added to the configuration to ensure that each peptide is assigned to a unique combination of pools.\n\n\nSAT solver\nIf --num-peptides-per-pool is equal to or less than 10 and if --num-coverage is equal to or less than 3, we run a SAT solver to systematically search for an optimal configuration (i.e. minimum number of necessary pools). If --num-peptides or the number of unique peptides in --peptides-csv-file exceeds 100, the SAT solver approach divides the peptides list into groups of 100 to linearly scale the computation time of configuration generation to the number of peptides."
  },
  {
    "objectID": "identify.html",
    "href": "identify.html",
    "title": "identify",
    "section": "",
    "text": "usage: ace identify [-h] \n    --readout-file-type READOUT_FILE_TYPE \n    --readout-files READOUT_FILES \n    --configuration-csv-file CONFIGURATION_CSV_FILE \n    --min-positive-spot-count MIN_POSITIVE_SPOT_COUNT \n    --output-csv-file OUTPUT_CSV_FILE\n\n\n\n\n\n\n\nRequired Parameter\nDescription\n\n\n\n\n--readout-file-type\nELISpot read-out file type (allowed options: pool_id, aid_plate_reader).\n\n\n--readout-files\nELISpot read-out file(s).If the readout-file-type is pool_id, then the expected columns of the CSV file are: pool_id, spot_count.If the readout-file-type is aid_plate_reader, then the readout-files are the Excel files from the AID plate reader machine. If there were pools in 2 or more plates, then supply the files in the following order: plate 1 readout file, plate 2 readout file etc.\n\n\n--configuration-csv-file\nELISpot configuration CSV file. Expected columns: pool_id, peptide_id, plate_id, well_id.\n\n\n--min-positive-spot-count\nNumber of spots for a pool to be considered a positive hit.\n\n\n--output-csv-file\nOutput CSV file.\n\n\n\n\nExample\nLet’s say you used the generate command in ACE to generate an ELISpot configuration for pooling 10 peptides per pool for a total of 100 unique peptides. The configuration also repeated each peptide 3 times (i.e. 3x coverage); you created 100peptides_10perpool_3x.csv. You took this configuration and successfully ran an ELISpot experiment. Now you want to identify (deconvolve) hit peptides. Here we describe how you can achieve this using ACE.\n\nAID Plate Reader\nIf you used a plate reader from AID, we are able to automatically parse the xlsx file from the machine.\nelispot_results.xlsx:\n\nIdentify (deconvolve) hit peptides from your ELISpot experiment:\nace identify \\\n  --readout-file-type aid_plate_reader \\\n  --readout-files /path/elispot_results.xlsx \\\n  --configuration-csv-file /path/100peptides_10perpool_3x.csv \\\n  --min-positive-spot-count 300 \\\n  --output-csv-file ace_deconvolution_results.csv\n\n\nAny Reader\nYou can alternatively supply a generic ELISpot results csv file to ACE:\nelispot_results.csv:\n\n\n\npool_id\nspot_count\n\n\n\n\npool_1\n300\n\n\n…\n…\n\n\npool_30\n0\n\n\n\nIdentify (deconvolve) hit peptides from your ELISpot experiment:\nace identify \\\n  --readout-file-type pool_id \\\n  --readout-files /path/elispot_results.csv \\\n  --configuration-csv-file /path/100peptides_10perpool_3x.csv \\\n  --min-positive-spot-count 300 \\\n  --output-csv-file ace_deconvolution_results.csv\n\n\n\nDeconvolution results\nHere is what ACE deconvolution results look like:\n\n\n\n\n\n\n\n\n\npeptide_id\npool_ids\nnum_coverage\ndeconvolution_result\n\n\n\n\npeptide_7\npool_5;pool_9;pool_13\n3\nhit\n\n\n…\n…\n…\n…\n\n\npeptide_9\npool_1;pool_9;pool_14\n3\ncandidate_hit\n\n\n\nACE deconvolution identifies two classes of peptides: candidate_hit and hit. Peptides that have the label hit are confident hits (assuming no false positives) because they were present in num_coverage (i.e. 3 in the above configuration) number of different pools with at least one unique assignment of hit peptide-pool. On the other hand, peptides that have the label candidate_hit need further validation (i.e. a second round of ELISpot) to determine whether it is indeed a hit peptide."
  },
  {
    "objectID": "verify.html",
    "href": "verify.html",
    "title": "verify",
    "section": "",
    "text": "The configuration has the minimum number of necessary pools: \\[ n_{pools} = \\frac{n_{peptides}}{n_{peptides\\;per\\;pool}} \\cdot n_{coverage} \\]\nEach peptide belongs to a unique combination of pool (well) IDs.\nEach peptide belongs to \\(n_{coverage}\\) different pool (well) IDs.\nAll peptide pairs that are similar (above a certain threshold based on a sequence similarity criterion) are pooled together in exactly one pool.\n\nusage: ace verify [-h] \n    --configuration-csv-file CONFIGURATION_CSV_FILE \n    --num-peptides-per-pool NUM_PEPTIDES_PER_POOL \n    --num-coverage NUM_COVERAGE\n\n\n\n\n\n\n\nRequired Parameter\nDescription\n\n\n\n\n--configuration-csv-file\nELISpot configuration CSV file. Expected columns: coverage_id, pool_id, peptide_id.\n\n\n--num-peptides-per-pool\nNumber of peptides per pool.\n\n\n--num-coverage\nTotal coverage (i.e. number of peptide replicates)."
  }
]